package com.campusrecruit.activity;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.zip.Inflater;

import android.app.ActionBar;
import android.app.ActionBar.Tab;
import android.app.ActionBar.TabListener;
import android.app.Activity;
//import android.app.FragmentTransaction;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.SimpleOnPageChangeListener;
import android.util.Log;
import android.view.GestureDetector;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.ViewSwitcher;

import com.campusrecruit.adapter.ListViewReplyAdapter;
import com.campusrecruit.adapter.ViewPagerRecruitDetailAdapter;
import com.campusrecruit.app.AppConfig;
import com.campusrecruit.app.AppContext;
import com.campusrecruit.app.AppException;
import com.campusrecruit.bean.BBSReply;
import com.campusrecruit.bean.BBSTopic;
import com.campusrecruit.bean.Company;
import com.campusrecruit.bean.Recruit;
import com.campusrecruit.common.StringUtils;
import com.campusrecruit.common.UIHelper;
import com.campusrecruit.fragment.BaseFragment;
import com.campusrecruit.fragment.CommentsFragment;
import com.campusrecruit.fragment.CompanyDetailFragment;
import com.campusrecruit.fragment.RecruitDetailFragment;
import com.campusrecruit.fragment.RecruitFragment;
import com.campusrecruit.fragment.RecruitProcessFragment;
import com.campusrecruit.widget.BadgeView;
import com.campusrecruit.widget.PullToRefreshListView;
import com.krislq.sliding.R;

public class RecruitDetailActivity extends FragmentActivity {

	private ViewPager viewPager = null;
	// footer
	private ImageView vJoined;
	private BadgeView bv_comment;
	private ImageView vDetail;
	private ImageView vReplyList;
	private ImageView vShare;
	private LinearLayout vFooter;

	private Recruit recruitDetail;
	private ArrayList<BBSReply> lvReplyData = new ArrayList<BBSReply>();

	private ListViewReplyAdapter lvReplyAdapter;

	private CommentsFragment commentsFragment;
	private CompanyDetailFragment companyDetailFragment;
	private RecruitDetailFragment recruitDetailFragment;
	private RecruitProcessFragment recruitProcessFragment;

	private Handler completeHandler;

	private ViewSwitcher mFootViewSwitcher;
	private ImageView vFootEditebox;
	private EditText mFootEditer;
	private Button vFootPubcomment;
	private ProgressDialog mProgress;
	private InputMethodManager imm;
	private String tempReplyKey = AppConfig.TEMP_COMMENT;

	private AppContext appContext;

	private boolean flag;

	private String _content;

	private GestureDetector gd;
	private boolean isFullScreen;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.detail_empty);
		getActionBar().setHomeButtonEnabled(true);
		recruitDetail = (Recruit) getIntent().getSerializableExtra("recruit");
		Log.i("rd", recruitDetail.getCompany().getCompanyID() + "");
		flag = getIntent().getBooleanExtra("flag", true);

		appContext = (AppContext) getApplication();
		mProgress = ProgressDialog.show(this, null, "获取数据中···", true, true);
		if (savedInstanceState == null)
			initFragmentData();

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		getMenuInflater().inflate(R.menu.menu_refresh, menu);
		return true;
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch(item.getItemId()){
		case android.R.id.home:
			onBackPressed();
			return true;
		case R.id.menu_refresh_id:
			Log.i("refresh", "touched");
			//refresh event
			
			return true;
		}
		return false;
	}
	
	private void initFragmentHandler() {
		completeHandler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				Log.i("ac", "handle msg rdview");
				mProgress.dismiss();
				if (msg.what == 1) {
					Log.i("ac", "handle rdview");
					commentsFragment = CommentsFragment.newInstance(
							recruitDetail.getTopicID(), recruitDetail,
							lvReplyData);
					companyDetailFragment = CompanyDetailFragment
							.newInstance(recruitDetail.getCompany());
					recruitProcessFragment = RecruitProcessFragment
							.newInstance(recruitDetail);
					recruitDetailFragment = RecruitDetailFragment
							.newInstance(recruitDetail);
					ArrayList<BaseFragment> fragments = new ArrayList<BaseFragment>(
							4);
					fragments.add(recruitDetailFragment);
					fragments.add(recruitProcessFragment);
					fragments.add(companyDetailFragment);
					fragments.add(commentsFragment);
					Log.i("ac", "init rdview");
					initView(fragments);
				}
			}
		};

	}

	private void initFragmentData() {
		initFragmentHandler();
		new Thread() {
			public void run() {
				try {
					Message msg = new Message();
					lvReplyData = appContext.getBBSReplyList(
							recruitDetail.getTopicID(), 0, true);
					if (recruitDetail.getDescription() == null) {
						Recruit result = appContext
								.getRecruitDetail(recruitDetail.getRecruitID());
						recruitDetail.setDescription(result.getDescription());
						recruitDetail.setContact(result.getContact());
						recruitDetail.setState(result.getState());
						recruitDetail.setStatTime(result.getStatTime());
					}
					if (recruitDetail.getCompany().getIntroduction() == null) {
						Company company = appContext
								.getCompanyDetail(recruitDetail.getCompany()
										.getCompanyID());
						recruitDetail.getCompany().setIntroduction(
								company.getIntroduction());
						recruitDetail.getCompany().setPlace(company.getPlace());
					}
					msg.what = 1;
					completeHandler.sendMessage(msg);
					Log.i("ac", "send msg");
				} catch (AppException e) {
					mProgress.dismiss();
					e.printStackTrace();
					e.makeToast(RecruitDetailActivity.this);
				}

			}
		}.start();
	}

	private void initView(List<BaseFragment> fragments) {
		Log.i("ac", "rd init View");
		LinearLayout parentLayout = (LinearLayout) findViewById(R.id.recruit_detail_main_layout);
		View mainView = View.inflate(this, R.layout.recruit_detail_info,
				parentLayout);

		viewPager = (ViewPager) mainView.findViewById(R.id.detail_viewPager);
		ViewPagerRecruitDetailAdapter adapter = new ViewPagerRecruitDetailAdapter(
				getSupportFragmentManager(), fragments);
		viewPager.setAdapter(adapter);
		adapter.notifyDataSetChanged();
		viewPager.setOnPageChangeListener(onPageChangeListener);

		vDetail = (ImageView) mainView.findViewById(R.id.detail_footbar_detail);
		vReplyList = (ImageView) mainView
				.findViewById(R.id.detail_footbar_commentlist);
		vShare = (ImageView) mainView.findViewById(R.id.detail_footbar_share);
		vJoined = (ImageView) mainView.findViewById(R.id.detail_footbar_joined);

		vJoined.setOnClickListener(joinedClickListener);
		vShare.setOnClickListener(shareClickListener);
		vDetail.setOnClickListener(detailClickListener);
		vReplyList.setOnClickListener(commentlistClickListener);

		bv_comment = new BadgeView(this, vReplyList);
		bv_comment.setBackgroundResource(R.drawable.widget_count_bg2);
		bv_comment.setIncludeFontPadding(false);
		bv_comment.setGravity(Gravity.CENTER);
		bv_comment.setTextSize(8f);
		bv_comment.setTextColor(Color.WHITE);

		imm = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);

		mFootViewSwitcher = (ViewSwitcher) mainView
				.findViewById(R.id.detail_foot_viewswitcher);
		vFootPubcomment = (Button) mainView
				.findViewById(R.id.detail_foot_pubcomment);
		vFootPubcomment.setOnClickListener(commentpubClickListener);
		vFootEditebox = (ImageView) mainView
				.findViewById(R.id.detail_footbar_editebox);
		vFootEditebox.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				mFootViewSwitcher.showNext();
				mFootEditer.setVisibility(View.VISIBLE);
				mFootEditer.requestFocus();
				mFootEditer.requestFocusFromTouch();
			}
		});
		mFootEditer = (EditText) mainView.findViewById(R.id.detail_foot_editer);
		mFootEditer.setOnFocusChangeListener(new View.OnFocusChangeListener() {
			public void onFocusChange(View v, boolean hasFocus) {
				if (hasFocus) {
					imm.showSoftInput(v, 0);
				} else {
					imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
				}
			}
		});
		mFootEditer.setOnKeyListener(new View.OnKeyListener() {
			public boolean onKey(View v, int keyCode, KeyEvent event) {
				if (keyCode == KeyEvent.KEYCODE_BACK) {
					if (mFootViewSwitcher.getDisplayedChild() == 1) {
						mFootViewSwitcher.setDisplayedChild(0);
						mFootEditer.clearFocus();
						mFootEditer.setVisibility(View.GONE);
					}
					return true;
				}
				return false;
			}
		});
		// 编辑器添加文本监听
		mFootEditer.addTextChangedListener(UIHelper.getTextWatcher(this,
				tempReplyKey));

		// 显示临时编辑内容
		UIHelper.showTempEditContent(this, mFootEditer, tempReplyKey);

		// 是否参与
		if (recruitDetail.getIsJoined() == 1)
			vJoined.setImageResource(R.drawable.widget_bar_favorite_y);
		else
			vJoined.setImageResource(R.drawable.widget_bar_favorite_n);

		// 显示评论数
		if (recruitDetail.getReplies() > 0) {
			bv_comment.setText(recruitDetail.getReplies() + "");
			bv_comment.show();
		} else {
			bv_comment.setText("");
			bv_comment.hide();
		}
		initTab();

		/*
		 * lvReplyAdapter = new ListViewReplyAdapter(this, lvReplyData,
		 * R.layout.comment_listitem);
		 */
	}

	private void initTab() {
		ActionBar actionBar = getActionBar();
		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
		actionBar.removeAllTabs();
		actionBar.addTab(actionBar.newTab().setText("职位描述")
				.setTabListener(tabListener));
		actionBar.addTab(actionBar.newTab().setText("招聘流程")
				.setTabListener(tabListener));
		actionBar.addTab(actionBar.newTab().setText("公司简介")
				.setTabListener(tabListener));
		actionBar.addTab(actionBar.newTab().setText("评论信息")
				.setTabListener(tabListener));
	}

	private void saveUserReplyTopic() {
		// 添加用户帖子
		BBSTopic topic = new BBSTopic();
		topic.setTopicID(recruitDetail.getTopicID());
		topic.setCreatedTime(recruitDetail.getCreatedTime());
		topic.setTitle(recruitDetail.getCompany().getCompanyName() + "校园招聘");
		topic.setStatus(1);
		appContext.commentPubAfter(topic);
		new Thread() {
			@Override
			public void run() {
				appContext.saveUserTopic(recruitDetail.getTopicID(),
						recruitDetail.getCompany().getCompanyName(),
						recruitDetail.getCreatedTime());
			}

		}.start();
	}

	private View.OnClickListener commentpubClickListener = new View.OnClickListener() {
		public void onClick(View v) {
			_content = mFootEditer.getText().toString();
			if (StringUtils.isEmpty(_content)) {
				UIHelper.ToastMessage(v.getContext(), "请输入评论内容");
				return;
			}
			if (!appContext.isLogin()) {
				UIHelper.redirectToLogin(RecruitDetailActivity.this);
				return;
			}

			mProgress = ProgressDialog.show(v.getContext(), null, "发表中···",
					true, true);

			final Handler handler = new Handler() {
				public void handleMessage(Message msg) {

					if (mProgress != null)
						mProgress.dismiss();

					if (msg.what == 1) {
						Log.i("ac", "click");
						BBSReply reply = (BBSReply) msg.obj;
						UIHelper.ToastMessageCommentSucess(RecruitDetailActivity.this);
						mFootViewSwitcher.setDisplayedChild(0);
						mFootEditer.clearFocus();
						mFootEditer.setText("");
						mFootEditer.setVisibility(View.GONE);
						Log.i("ac", "click2");
						// 更新评论列表
						lvReplyData.add(0, reply);
						Log.i("ac", lvReplyData.size() + "");
						// lvReplyAdapter.notifyDataSetChanged();

						Log.i("ac", "test");
						// 显示评论数
						int count = recruitDetail.getReplies() + 1;
						recruitDetail.setReplies(count);
						bv_comment.setText(count + "");
						bv_comment.show();
						// 清除之前保存的编辑内容
						appContext.removeProperty(tempReplyKey);
						viewPager.setCurrentItem(3);
						saveUserReplyTopic();
					} else {
						((AppException) msg.obj)
								.makeToast(RecruitDetailActivity.this);
					}
				}
			};
			new Thread() {
				public void run() {
					Message msg = new Message();
					try {
						// 发表评论
						BBSReply reply = appContext.addReply(
								recruitDetail.getTopicID(), _content);
						msg.what = 1;
						msg.obj = reply;
					} catch (AppException e) {
						e.printStackTrace();
						msg.what = -1;
						msg.obj = e;
					}
					handler.sendMessage(msg);
				}
			}.start();
		}
	};

	/**
	 * 注册双击全屏事件
	 */
	private void regOnDoubleEvent() {
		gd = new GestureDetector(this,
				new GestureDetector.SimpleOnGestureListener() {
					@Override
					public boolean onDoubleTap(MotionEvent e) {
						isFullScreen = !isFullScreen;
						if (!isFullScreen) {
							WindowManager.LayoutParams params = getWindow()
									.getAttributes();
							params.flags &= (~WindowManager.LayoutParams.FLAG_FULLSCREEN);
							getWindow().setAttributes(params);
							getWindow()
									.clearFlags(
											WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);
							// vHead.setVisibility(View.VISIBLE);
							vFooter.setVisibility(View.VISIBLE);
						} else {
							WindowManager.LayoutParams params = getWindow()
									.getAttributes();
							params.flags |= WindowManager.LayoutParams.FLAG_FULLSCREEN;
							getWindow().setAttributes(params);
							getWindow()
									.addFlags(
											WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);
							// vHead.setVisibility(View.GONE);
							vFooter.setVisibility(View.GONE);
						}
						return true;
					}
				});
	}

	private View.OnClickListener shareClickListener = new View.OnClickListener() {
		public void onClick(View v) {
			if (recruitDetail == null) {
				UIHelper.ToastMessage(v.getContext(),
						R.string.msg_read_detail_fail);
				return;
			}
			// 分享到微博
			UIHelper.showShareRecruitDialog(RecruitDetailActivity.this,
					recruitDetail);
		}
	};

	private View.OnClickListener detailClickListener = new View.OnClickListener() {
		public void onClick(View v) {
			// 切换到详情
			viewPager.setCurrentItem(0);
			// viewSwitch(VIEWSWITCH_TYPE_DETAIL);
		}
	};

	private View.OnClickListener commentlistClickListener = new View.OnClickListener() {
		public void onClick(View v) {
			// 切换到评论
			viewPager.setCurrentItem(3);
			// viewSwitch(VIEWSWITCH_TYPE_COMMENTS);
		}
	};

	private View.OnClickListener joinedClickListener = new View.OnClickListener() {
		public void onClick(View v) {
			if (!appContext.isLogin()) {
				UIHelper.showUserLoginDialog(RecruitDetailActivity.this);
				return;
			}
			Log.i("test", "click");
			if (recruitDetail.getIsJoined() == 1) {
				recruitDetail.setIsJoined(0);
				vJoined.setImageResource(R.drawable.widget_bar_favorite_n);
				// vJoined.setImageDrawable(getResources().getDrawable(
				// R.drawable.widget_bar_favorite_y));
				UIHelper.ToastMessage(RecruitDetailActivity.this, "取消收藏");
				appContext.recruitDetailJoin(recruitDetail, false);
			} else {
				vJoined.setImageResource(R.drawable.widget_bar_favorite_y);
				// vJoined.setImageDrawable(getResources().getDrawable(
				// R.drawable.widget_bar_favorite_n));
				recruitDetail.setIsJoined(1);
				UIHelper.ToastMessage(RecruitDetailActivity.this, "收藏成功");
				appContext.recruitDetailJoin(recruitDetail, true);
			}
			new Thread() {
				public void run() {
					try {
						if (recruitDetail.getIsJoined() == 1) {
							appContext.joinRecruit(
									recruitDetail.getRecruitID(), true);
							vJoined.setImageResource(R.drawable.widget_bar_favorite2);
							Log.i("test", "click");
						} else {
							appContext.joinRecruit(
									recruitDetail.getRecruitID(), false);
							vJoined.setImageResource(R.drawable.widget_bar_favorite);
							Log.i("test", "click2");
						}
					} catch (AppException e) {
						e.printStackTrace();
					}

				}
			}.start();
		}
	};

	/*
	 * @Override public boolean dispatchTouchEvent(MotionEvent event) {
	 * 
	 * if (isAllowFullScreen()) { gd.onTouchEvent(event); }
	 * 
	 * gd.onTouchEvent(event); return super.dispatchTouchEvent(event); }
	 */

	private SimpleOnPageChangeListener onPageChangeListener = new SimpleOnPageChangeListener() {

		@Override
		public void onPageSelected(int position) {
			super.onPageSelected(position);
			getActionBar().setSelectedNavigationItem(position);
		}

	};

	private TabListener tabListener = new TabListener() {

		@Override
		public void onTabReselected(Tab tab, android.app.FragmentTransaction ft) {

		}

		@Override
		public void onTabSelected(Tab tab, android.app.FragmentTransaction ft) {
			if (viewPager.getCurrentItem() != tab.getPosition())
				viewPager.setCurrentItem(tab.getPosition());
		}

		@Override
		public void onTabUnselected(Tab tab, android.app.FragmentTransaction ft) {

		}

		/*
		 * @Override public void onTabReselected(Tab tab, FragmentTransaction
		 * ft) { }
		 * 
		 * @Override public void onTabSelected(Tab tab, FragmentTransaction ft)
		 * { if (viewPager.getCurrentItem() != tab.getPosition())
		 * viewPager.setCurrentItem(tab.getPosition()); }
		 * 
		 * @Override public void onTabUnselected(Tab tab, FragmentTransaction
		 * ft) {
		 * 
		 * }
		 */

	};

}
